Plugin 如何被注册到 webpack 的生命周期中？
1、在 webpack 函数的 createCompiler 方法中，注册了所有的插件
2、在注册插件时，会调用插件函数或者插件对象的 apply 方法
3、插件方法会接收 compiler 对象，我们可以通过 compiler 对象来注册 Hook 的事件
4、某些插件也会传入一个 compilation 的对象，我们也可以监听 compilation 的 Hook 事件

源码：
1、拿到所有的插件
for(const plugin of options.plugins){
  if(typeof plugin === "function"){

  }else{
    // 如果是一个对象，调用 apply 方法，注入 compiler
    plugin.apply(compiler)
  }
}


compiler 钩子
compiler 实例用来注册和调用插件，我们自定义插件就会先在上面注册。

由 compiler 暴露的生命周期钩子：
https://webpack.docschina.org/api/compiler-hooks/#hooks

run (AsyncSeriesHook):
在开始读取 records 之前调用。

emit (AsyncSeriesHook):
输出 asset 到 output 目录之前执行。

compile (SyncHook):
beforeCompile 之后立即调用，但在一个新的 compilation创建之前。


compilation 钩子
compilation 实例可以访问所有的模块，对模块进行编译（加载load=>封存seal=>优化optimize=>分块chunk=>哈希hash=>重新创建restore）


compiler 和 compilation 的区别在于：
1、compiler 代表了整个 webpack 从启动到关闭的生命周期，而 compilation 只是代表了一次新的编译过程
2、compiler 和 compilation 暴露出许多钩子，我们可以根据实际需求的场景进行自定义处理